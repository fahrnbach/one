name: Promote to Prod

on:
  workflow_dispatch:
    inputs:
      release_sha:
        description: "Commit SHA to promote (must match an uploaded staging artifact)"
        required: true
      confirm:
        description: 'Type "I understand" to deploy to prod'
        required: true

concurrency:
  group: ${{ github.workflow }}-prod
  cancel-in-progress: false

permissions:
  contents: read
  actions: read

jobs:
  preflight:
    runs-on: ubuntu-latest
    steps:
      - name: Validate confirmation
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "I understand" ]; then
            echo "Confirmation mismatch. Aborting."; exit 1; fi
      - name: Echo release SHA
        run: echo "Promoting ${{ github.event.inputs.release_sha }}"

  deploy:
    needs: preflight
    runs-on: ubuntu-latest
    # Protect prod via GitHub Environments (branch protection / required reviewers)
    environment: production
    env:
      NODE_VERSION: '20'
      NX_CLOUD_DISABLED: 'true'
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Get pnpm store path
        id: pnpm-cache
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      # We don't rebuild; we re-use the exact staging artifact

      - name: Download staging artifact for this SHA
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: release-staging.yml             # file name of the staging workflow
          name: sesame-worker-${{ github.event.inputs.release_sha }}
          commit: ${{ github.event.inputs.release_sha }}  # must be full 40-char SHA
          workflow_conclusion: success
          path: dist/releases/${{ github.event.inputs.release_sha }}

      - name: Verify artifact exists
        run: |
          test -f "dist/releases/${{ github.event.inputs.release_sha }}/meta-worker.generated.js" \
            || (echo "Artifact missing for SHA" && exit 1)

      # Optional: ensure prod R2 exists (idempotent)
      - name: Ensure R2 bucket (prod)
        uses: cloudflare/wrangler-action@v3
        continue-on-error: true
        with:
          wranglerVersion: '4.31.0'
          command: r2 bucket create sesame-data

      # Optional: seed data.json only if missing
      - name: Check data.json in prod
        id: r2-head
        continue-on-error: true
        uses: cloudflare/wrangler-action@v3
        with:
          wranglerVersion: '4.31.0'
          command: r2 object get --json sesame-data/data.json >/dev/null

      - name: Seed data.json to prod (first-time only)
        if: steps.r2-head.outcome == 'failure'
        uses: cloudflare/wrangler-action@v3
        with:
          wranglerVersion: '4.31.0'
          command: >
            r2 object put sesame-data/data.json
            --file apps/core/portfolio/sesame.jiode.one/data.json

      # Optional: sync prod images folder (only new/changed)
      # Comment out if you prefer manual management.
      - name: Upload images/* to prod R2
        uses: cloudflare/wrangler-action@v3
        with:
          wranglerVersion: '4.31.0'
          command: >
            r2 object put-batch sesame-data
            --prefix images/
            --dir apps/core/portfolio/sesame.jiode.one/images
            --content-type-by-ext

      # Deploy to prod (no bundle, use prod wrangler.toml)
      - name: Deploy to production
        uses: cloudflare/wrangler-action@v3
        with:
          wranglerVersion: '4.31.0'
          command: >
            deploy dist/releases/${{ github.event.inputs.release_sha }}/meta-worker.generated.js
            --config apps/core/portfolio/sesame.jiode.one/sesame-meta-worker/wrangler.toml
            --no-bundle

  # (Optional) quick rollback using a version id
  rollback:
    if: ${{ false }} # flip to true when you want to run via "Re-run job" with inputs
    runs-on: ubuntu-latest
    needs: deploy
    environment: production
    steps:
      - name: Rollback (example)
        uses: cloudflare/wrangler-action@v3
        with:
          wranglerVersion: '4.31.0'
          command: >
            rollback
