Every good developer workflow is made to be quick and easy. (Just like this Dev Spark post)
Make node versioning a breeze with this easy script you can add into zsh.

First, find your ~/.zshrc file (it's likely at the root of your filesystem)

Next, open it up in an editor

`code ~/.zshrc`

and paste the following somewhere AFTER you add nvm to your $PATH

```
## 🛠️ Dev Snippet: Auto-Switch Node with `.nvmrc` in Zsh

> ⚡️ Save time and avoid version mismatch errors by automatically switching Node versions when entering project directories — powered by `.nvmrc` and Zsh hooks.

```sh
# ~/.zshrc – Auto-load Node version from nearest .nvmrc on directory change

autoload -U add-zsh-hook

load-nvmrc() {
  local nvmrc_path
  nvmrc_path="$(find-up .nvmrc)"
  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node
    nvmrc_node=$(<"$nvmrc_path")
    if [ "$nvmrc_node" != "$NODE_VERSION" ]; then
      nvm use "$nvmrc_node" > /dev/null
      export NODE_VERSION="$nvmrc_node"
      echo "🔄 Switched to Node $NODE_VERSION in project: $(basename "$PWD")"
    fi
  fi
}

find-up() {
  local dir="$PWD"
  while [ "$dir" != "/" ]; do
    if [ -f "$dir/$1" ]; then
      echo "$dir/$1"
      return
    fi
    dir=$(dirname "$dir")
  done
}

add-zsh-hook chpwd load-nvmrc
load-nvmrc  # run on shell start
```
🧪 Usage
	1.	Install nvm
	2.	Add .nvmrc files to your projects (e.g., v20)
	3.	Drop the snippet above into your ~/.zshrc
	4.	cd into any project and it will just work ✅
```
🛸  cd ~/my-cool-project
🔄 Switched to Node v20 in project: my-cool-project
```
⸻

💡 Pro Tip: Add a fallback .nvmrc in your home directory to act as a default when no project version is set.
